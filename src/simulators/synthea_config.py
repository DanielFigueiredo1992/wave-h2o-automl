import pandas as pd
from datetime import datetime
from datetime import date
from dateutil.relativedelta import relativedelta

class PatientGenerator:
    """
    Configuration file Synthea Simulator
    """
    # Define output files and columns generated by Synthea: https://synthetichealth.github.io/synthea/
    def __init__(self):
        self.output_folder = ''
        self.allergy_file = 'allergies.csv'
        self.careplans_file = 'careplans.csv'
        self.conditions_file = 'conditions.csv'
        self.devices_file = 'devices.csv'
        self.encounters_file = 'encounters.csv'
        self.imaging_studies_file = 'imaging_studies.csv'
        self.immunizations_file = 'immunizations.csv'
        self.medications_file = 'medications.csv'
        self.observations_file = 'observations.csv'
        self.organizations_file = 'organizations.csv'
        self.patients_file = 'patients.csv'
        self.payer_transitions_file = 'payer_transitions.csv'
        self.payers_file = 'payers.csv'
        self.procedures_file = 'procedures.csv'
        self.providers_file = 'providers.csv'
        self.supplies_file = 'supplies.csv'
        self.patient_id_col = 'Id' # patient column in patients.csv
        self.condition_patient_col = 'PATIENT'  # patient column in conditions.csv
        self.condition_col = 'DESCRIPTION' # description column in conditions.csv
        self.death_col = 'DEATHDATE'  # death date column in patients.csv
        self.birth_col = 'BIRTHDATE'
        self.age_col = 'AGE'

    # Collapse multiple rows (agg_col) into a single row (list of strings) grouped by groupby_col
    def merge_rows(self, df, groupby_col, agg_col):
        def create_list(series):
            s = []
            [s.append(x) for x in series]
            return s
        merged_df = df.groupby(groupby_col).agg({agg_col: create_list}).reset_index()
        return merged_df

    def calculate_age(self, birth_date):
        birth_date = pd.to_datetime(birth_date)
        r = relativedelta(pd.to_datetime('now'), birth_date)
        return r.years

    # Merge patients.csv with conditions.csv
    def get_patient_df(self, type='last'):
        pat_df = pd.read_csv(self.output_folder + self.patients_file)
        cond_df = pd.read_csv(self.output_folder + self.conditions_file)
        # Either merge conditions or take last one
        if type == 'merge':
            merged_cond_df = self.merge_rows(cond_df, self.condition_patient_col, self.condition_col)
        else:
            merged_cond_df = cond_df.groupby(self.condition_patient_col).aggregate({self.condition_col: 'max'}).reset_index()
        # Merge patient and conditions
        merged_df = pd.merge(pat_df, merged_cond_df, how='left', left_on=self.patient_id_col, right_on=self.condition_patient_col)
        # Exclude dead patients
        merged_df = merged_df[merged_df[self.death_col].isnull()]
        # Calculate Age
        merged_df[self.age_col] = merged_df[self.birth_col].apply(self.calculate_age)
        merged_df[self.condition_col].fillna('', inplace=True)
        return merged_df

patient_generator = PatientGenerator()
